# Loading the required Python libraries
import numpy as np
import matplotlib.pyplot as plt
import scipy.special
import scipy.interpolate as interp
import math
import pandas as pd
import streamlit as st
import streamlit_book as stb
from streamlit_extras.stateful_button import button

# Authors, institutions, and year
year = 2025 
authors = {
    "Thomas Reimann": [1],  # Author 1 belongs to Institution 1
    "Eileen Poeter": [2],
}
institutions = {
    1: "TU Dresden, Institute for Groundwater Management",
    2: "Colorado School of Mines"
}
index_symbols = ["¬π", "¬≤", "¬≥", "‚Å¥", "‚Åµ", "‚Å∂", "‚Å∑", "‚Å∏", "‚Åπ"]
author_list = [f"{name}{''.join(index_symbols[i-1] for i in indices)}" for name, indices in authors.items()]
institution_list = [f"{index_symbols[i-1]} {inst}" for i, inst in institutions.items()]
institution_text = " | ".join(institution_list)

st.title('üü£ :violet[Neuman] parameter estimation')

st.header('for drawdown in :violet[**unconfined aquifers**]')
st.markdown("""
            This section uses the Neuman Solution for drawdown in response to pumping an :violet[**unconfined aquifer**] to estimate Transmissivity, Specific Storage, Specific Yield, and Vertical Hydraulic Conductivity of the aquifer.
            """) 

st.subheader(':violet-background[Introduction]', divider="violet")

st.markdown("""
            The Neuman solution (1972, 1973) was developed to evaluate pumping tests in unconfined aquifers.
            
            This application uses the Neuman Solution to estimate Transmissivity $T$, Specific Storage $Ss$, Specific Yield $Sy$, and Beta $Œ≤$ from drawdown data collected during a pumping test.
            
            You can estimate $T$, $Ss$, $Sy$, and $Œ≤$ by adjusting a slider or by typing a number (depending on the toggle switch position) to modify the values of $T$, $Ss$, $Sy$, and $Œ≤$ until the measured data align with the Neuman curve for the input parameters. 
            """)
            
left_co, cent_co, last_co = st.columns((20,60,20))
with cent_co:
    st.image('WELL_HYDRAULICS/GWP_Pumping_Test_Analysis/assets/images/unconfined_aquifer_2.png', caption="Cross section of a pumped unconfined aquifer, Kruseman et al. 1994")
            
st.markdown("""
            Before investigating the Neuman Solution it is useful to think about the questions provided in this initial assessment.
"""
)
# Initial assessment
   
with st.expander(":green[**Show/Hide the initial assessment**]"):
    columnsQ1 = st.columns((1,1))
    
    with columnsQ1[0]:
        stb.single_choice(":violet[**What conditions are appropriate for use of the Neuman Solution?**]",
                  ["Steady state flow, confined aquifer.", "Transient flow, confined aquifer", "Steady state flow, semiconfined aquifer",
                  "Transient flow, semiconfined aquifer", "Steady state flow, unconfined aquifer",
                  "Transient flow, unconfined aquifer"],
                  5,success='CORRECT! The Neuman Solution is designed for evaluating transient flow in an unconfined aquifer', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')
        stb.single_choice(":violet[**In an unconfined aquifer, what additional factor must be considered when analyzing well drawdown?**]",
                  ["The presence of a confining layer", "The effect of specific storage", "The delayed response due to water table storage", "The transmissivity remains constant"],
                  2,success='CORRECT! The delayed response due to water table storage', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')
        stb.single_choice(":violet[**What is the key difference between the Neuman solution and the Theis solution?**]",
                  ["Theis solution applies to unconfined aquifers, while Neuman is for confined aquifers", "Neuman solution accounts for delayed water table response, while Theis assumes an immediate response", "Theis solution considers leaky conditions, while Neuman assumes a fully confined system", "The Neuman solution is only valid for steady-state conditions"],
                  1,success='CORRECT! Neuman solution accounts for delayed water table response, while Theis assumes an immediate response', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')
    with columnsQ1[1]:
        stb.single_choice(":violet[**What additional parameter is introduced in the Neuman solution to account for water table effects?**]",
                  ["Leakage factor", "Specific yield (Sy)", "Hydraulic head", "Transmissivity (T)"],
                  1,success='CORRECT! Specific yield (Sy) is used to reflect drainage of water from pores under unconfined conditions', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')

        stb.single_choice(":violet[**How does the specific yield (Sy) affect the response of an unconfined aquifer in the Neuman solution?**]",
                  ["A higher specific yield results in a slower drawdown response", "A lower specific yield leads to more rapid flow to the well", "Specific yield does not influence drawdown in unconfined aquifers", "A higher specific yield causes the drawdown to increase over time"],
                  0,success='CORRECT! A higher specific yield results in a slower drawdown response', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')

        stb.single_choice(":violet[**Compared to a confined aquifer, what is a key effect of pumping in an unconfined aquifer?**]",
                  ["The drawdown is larger due to the lower storativity", "The drawdown is delayed due to water table storage effects", "The drawdown is smaller because of the lower transmissivity", "The aquifer does not experience any delayed response"],
                  1,success='CORRECT! The drawdown is delayed due to water table storage effects', error='This is not correct ... You can learn more about the Neuman Solution [by downloading the book: An Introduction to Hydraulic Testing in Hydrogeology - Basic Pumping, Slug, and Packer Methods‚Äã‚Äã and reading Section 10.3 and 10.4](https://gw-project.org/books/an-introduction-to-hydraulic-testing-in-hydrogeology-basic-pumping-slug-and-packer-methods/). Feel free to answer again.')
"---"
# Optional theory here
st.subheader(':violet-background[Underlying theory] - The Neuman Solution for Pumping Test Evaluation', divider="violet")
st.markdown(
            """  
            The Neuman solution extends the Theis solution to describe transient flow to a well in an unconfined aquifer, where drawdown begins as controlled by elastic storage, drawdown plateaus while vertical components of flow contribute water from storage near the water table, then drawdown continues at a rate controlled by drainage of pores as reflected by the specific yield term. 
            
            The Theis curve can be fit to early-time data by using the elastic storativity of the aquifer $S$, and another Theis curve can be fit to the late-time data by using the specific yield of the aquifer $Sy$. A term defined as beta $Œ≤$ describes the transition from elastic storage to pore water storage based on the relative values of vertical and horizontal hydraulic conductivity of the aquifer. 
            
            The early portion of the curve may occur so quickly that it is missed in the drawdown data collection.
            """
            )
# Optional theory here
with st.expander('**Click here for more information** about the underlying theory of the :violet[**Neuman Solution**]'): 
    st.markdown(
    """
    The drawdown $s$ at a distance $r$ from a well pumping at a constant rate $Q$ is given by:
    """
    )    
    st.latex(r'''s(r,t) = \frac{Q}{4\pi T} W(u_A, u_B)''')

    st.markdown(
    """    
    where:
    - $s$ is drawdown at time $t$ and distance $r$ from the well
    - $T$ is the transmissivity of the aquifer,
    - $W(u_A, u_B)$ is the Neuman well function,
    - $u_A$ and $u_B$ are dimensionless time parameters, defined as:
    """)

    st.latex(r'''u_A = \frac{r^2 S_a}{4 T t}''')
    st.latex(r'''u_B = \frac{r^2 S_y}{4 K_z b t}''')
    
    st.markdown(
    """    
    where:
    - $S_a$ is the elastic early-time storativity of the unconfined aquifer (the product of specific storage and aquifer thickness),
    - $Sy$ is specific yield of the unconfined aquifer,
    - $K_z$ is vertical hydraulic conductivity of the unconfined aquifer,
    - $b$ is saturated thickness of the unconfined aquifer,
    - $t$ is elapsed time since pumping began.
    """)

    st.markdown(
    """    
    $Œ≤$ defines the character of the Neuman curve as it transitions from elastic storage to pore water drainage
    """)
    
    st.latex(r'''\beta = \frac{r^2 K_z}{b^2 K}''') 
    
    st.markdown(
    """    
    where:
    - $K$ is horizontal hydraulic conductivity of the unconfined aquifer
    """)
  
    st.markdown(
    """ 
    The Neuman well function $W(u_A, u_B)$ accounts for both horizontal and vertical flow components and is computed numerically. It is often used in pumping test analysis to determine aquifer properties in unconfined conditions, where early-time drawdown is influenced by elastic storage effects (similar to confined aquifers), while later-time drawdown is dominated by drainage from the water table.
    """)

"---" 
# Computation
# (Here the necessary functions like the well function $W(u)$ are defined. Later, those functions are used in the computation)
# Define a function, class, and object for Theis Well analysis

def well_function(u):
    return scipy.special.exp1(u)
    
def theis_u_inv(T,S,r,t):
    u_inv = 1/(r ** 2 * S / 4. / T / t)
    return u_inv

def second_u_inv(T,SY,r,t):
    u_inv = 1/(r ** 2 * SY / 4. / T / t)
    return u_inv
    
def Neuman_s(Q, T, u, u_inv_NEU, w_u, beta):
    #Interpolate for discrete w_u
    method = 'linear'
    w_u_interpolated = interp.interp1d(u_inv_NEU, w_u[:, beta], kind=method, fill_value="extrapolate")
    s = Q / 4. / np.pi / T * w_u_interpolated(u)
    return s

def compute_s(T, S, t, Q, r, u_inv_NEU, w_u, beta):
    u_inv = theis_u_inv(T, S, r, t)
    s = Neuman_s(Q, T, u_inv, u_inv_NEU, w_u, beta)
    return s
    
def compute_statistics(measured, computed):
    # Calculate the number of values
    n = len(measured)

    # Initialize a variable to store the sum of squared differences
    total_me = 0
    total_mae = 0
    total_rmse = 0

    # Loop through each value
    for i in range(n): # Add the squared difference to the total
        total_me   += (computed[i] - measured[i])
        total_mae  += (abs(computed[i] - measured[i]))
        total_rmse += (computed[i] - measured[i])**2

    # Calculate the me, mae, mean squared error
    me = total_me / n
    mae = total_mae / n
    meanSquaredError = total_rmse / n

    # Raise the mean squared error to the power of 0.5 
    rmse = (meanSquaredError) ** (1/2)
    return me, mae, rmse

# Callback function to update session state
def update_T():
    st.session_state.T_slider_value = st.session_state.T_input
def update_Ss():
    st.session_state.Ss_slider_value = st.session_state.Ss_input
def update_SY():
    st.session_state.SY = st.session_state.SY_input
    
# Initialize session state for value and toggle state
st.session_state.T_slider_value = -2.0
st.session_state.Ss_slider_value = -5.0
st.session_state.SY = 0.25
st.session_state.number_input = False  # Default to number_input
    
# (Here, the methode computes the data for the well function. Those data can be used to generate a type curve.)
u_min = -5
u_max = 4

u = np.logspace(u_min,u_max)
u_inv = 1/u
u_inv_a = np.array([4.00E-01, 8.00E-01, 1.40E+00, 2.40E+00, 4.00E+00, 8.00E+00, 1.40E+01, 2.40E+01, 4.00E+01, 8.00E+01, 1.40E+02, 2.40E+02, 4.00E+02, 8.00E+02, 1.40E+03, 2.40E+03, 4.00E+03, 8.00E+03])
u_inv_b = np.array([1.40E-02, 2.40E-02, 4.00E-02, 8.00E-02, 1.40E-01, 2.40E-01, 4.00E-01, 8.00E-01, 1.40E+00, 2.40E+00, 4.00E+00, 8.00E+00, 1.40E+01, 2.40E+01, 4.00E+01, 8.00E+01, 1.40E+02, 2.40E+02, 4.00E+02, 8.00E+02, 1.00E+03])

w_u = well_function(u)

# Neuman type curve data from tables

w_u_a = [[2.48E-02, 2.41E-02, 2.30E-02, 2.14E-02, 1.88E-02, 1.70E-02, 1.38E-02, 1.00E-02, 1.00E-02],
         [1.45E-01, 1.40E-01, 1.31E-01, 1.19E-01, 9.88E-02, 8.49E-02, 6.03E-02, 3.17E-02, 1.74E-02],
         [3.58E-01, 3.45E-01, 3.18E-01, 2.79E-01, 2.17E-01, 1.75E-01, 1.07E-01, 4.45E-02, 2.10E-02],
         [6.62E-01, 6.33E-01, 5.70E-01, 4.83E-01, 3.43E-01, 2.56E-01, 1.33E-01, 4.76E-02, 2.14E-02],
         [1.02E+00, 9.63E-01, 8.49E-01, 6.88E-01, 4.38E-01, 3.00E-01, 1.40E-01, 4.78E-02, 2.15E-02],
         [1.57E+00, 1.46E+00, 1.23E+00, 9.18E-01, 4.97E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [2.05E+00, 1.88E+00, 1.51E+00, 1.03E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [2.52E+00, 2.27E+00, 1.73E+00, 1.07E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [2.97E+00, 2.61E+00, 1.85E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [3.56E+00, 3.00E+00, 1.92E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [4.01E+00, 3.23E+00, 1.93E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [4.42E+00, 3.37E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [4.77E+00, 3.43E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [5.16E+00, 3.45E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [5.40E+00, 3.46E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [5.54E+00, 3.46E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [5.59E+00, 3.46E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02],
         [5.62E+00, 3.46E+00, 1.94E+00, 1.08E+00, 5.07E-01, 3.17E-01, 1.41E-01, 4.78E-02, 2.15E-02]]

w_u_a = np.array(w_u_a)

w_u_b = [[5.62E+00, 3.46E+00, 1.94E+00, 1.09E+00, 5.12E-01, 3.23E-01, 1.45E-01, 5.09E-02, 2.39E-02],
         [5.62E+00, 3.46E+00, 1.94E+00, 1.09E+00, 5.12E-01, 3.23E-01, 1.47E-01, 5.32E-02, 2.57E-02],
         [5.62E+00, 3.46E+00, 1.94E+00, 1.09E+00, 5.16E-01, 3.27E-01, 1.52E-01, 5.68E-02, 2.86E-02],
         [5.62E+00, 3.46E+00, 1.94E+00, 1.09E+00, 5.24E-01, 3.37E-01, 1.62E-01, 6.61E-02, 3.62E-02],
         [5.62E+00, 3.46E+00, 1.94E+00, 1.10E+00, 5.37E-01, 3.50E-01, 1.78E-01, 8.06E-02, 4.86E-02],
         [5.62E+00, 3.46E+00, 1.95E+00, 1.11E+00, 5.57E-01, 3.74E-01, 2.05E-01, 1.06E-01, 7.14E-02],
         [5.62E+00, 3.46E+00, 1.96E+00, 1.13E+00, 5.89E-01, 4.12E-01, 2.48E-01, 1.49E-01, 1.13E-01],
         [5.62E+00, 3.46E+00, 1.98E+00, 1.18E+00, 6.67E-01, 5.06E-01, 3.57E-01, 2.66E-01, 2.31E-01],
         [5.63E+00, 3.47E+00, 2.01E+00, 1.24E+00, 7.80E-01, 6.42E-01, 5.17E-01, 4.45E-01, 4.19E-01],
         [5.63E+00, 3.49E+00, 2.06E+00, 1.35E+00, 9.54E-01, 8.50E-01, 7.63E-01, 7.18E-01, 7.03E-01],
         [5.63E+00, 3.51E+00, 2.13E+00, 1.50E+00, 1.20E+00, 1.13E+00, 1.08E+00, 1.06E+00, 1.05E+00],
         [5.64E+00, 3.56E+00, 2.31E+00, 1.85E+00, 1.68E+00, 1.65E+00, 1.63E+00, 9.99E+02, 9.99E+02],
         [5.65E+00, 3.63E+00, 2.55E+00, 2.23E+00, 2.15E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [5.67E+00, 3.74E+00, 2.86E+00, 2.68E+00, 2.65E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [5.70E+00, 3.90E+00, 3.24E+00, 3.15E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [5.76E+00, 4.22E+00, 3.85E+00, 3.82E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [5.85E+00, 4.58E+00, 4.38E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [5.99E+00, 5.00E+00, 4.91E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [6.16E+00, 5.46E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [6.47E+00, 6.11E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02],
         [6.60E+00, 6.50E+00, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02, 9.99E+02]]

w_u_b = np.array(w_u_b)

t_a_NEU = [0]*len(u_inv_a)
s_a_NEU = [0]*len(u_inv_a)
t_b_NEU = [0]*len(u_inv_b)
s_b_NEU = [0]*len(u_inv_b)

# Select data
# Data from Pirna 2023
m_time
m_ddown = [0.038, 0.043, 0.045, 0.046, 0.047, 0.048, 0.048, 0.049, 0.049, 0.05, 0.05, 0.051, 0.051, 0.051, 0.051, 0.052, 0.052, 0.052, 0.053, 0.053, 0.053, 0.054, 0.054, 0.054, 0.054, 0.055, 0.055, 0.055, 0.055, 0.056, 0.056, 0.056, 0.056, 0.057, 0.057, 0.057, 0.057, 0.057, 0.058, 0.058, 0.058, 0.058, 0.058, 0.059, 0.059, 0.059, 0.06, 0.059, 0.06, 0.06, 0.06, 0.06, 0.061, 0.061, 0.061, 0.061, 0.062, 0.062, 0.062, 0.062, 0.063, 0.063, 0.063, 0.063, 0.063, 0.064, 0.064, 0.064, 0.064, 0.064, 0.064, 0.065, 0.065, 0.065, 0.065, 0.065, 0.065, 0.066, 0.066, 0.066, 0.066, 0.066, 0.067, 0.067, 0.067, 0.067, 0.068, 0.068, 0.068, 0.068, 0.068, 0.069, 0.069, 0.069, 0.069, 0.069, 0.069, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.071, 0.071, 0.071, 0.071, 0.071, 0.071, 0.071, 0.072, 0.072, 0.072, 0.072, 0.072, 0.073, 0.073, 0.073, 0.073, 0.073, 0.073, 0.073, 0.074, 0.074, 0.074, 0.074, 0.074, 0.074, 0.075, 0.075, 0.075, 0.075, 0.075, 0.076, 0.076, 0.076, 0.076, 0.076, 0.076, 0.076, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.078, 0.078, 0.078, 0.078, 0.078, 0.078, 0.078, 0.078, 0.079, 0.079, 0.079, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.081, 0.081, 0.081, 0.081, 0.081, 0.081, 0.081, 0.081, 0.082, 0.082, 0.082, 0.082, 0.082, 0.083, 0.083, 0.083, 0.083, 0.083, 0.083, 0.083, 0.083, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.085, 0.084, 0.085, 0.085, 0.085, 0.085, 0.085, 0.085, 0.085, 0.086, 0.086, 0.086, 0.086, 0.086, 0.086, 0.086, 0.086, 0.086, 0.087, 0.087, 0.087, 0.087, 0.087, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.089, 0.089, 0.088, 0.089, 0.089, 0.089, 0.089, 0.089, 0.089, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.093, 0.093, 0.093, 0.093, 0.093, 0.093, 0.093, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.094, 0.095, 0.095, 0.095, 0.095, 0.095, 0.095, 0.095, 0.096, 0.096, 0.096, 0.096, 0.096, 0.096, 0.096, 0.096, 0.096, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.098, 0.098, 0.098, 0.098, 0.098, 0.098, 0.098, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.101, 0.101, 0.101, 0.101, 0.101, 0.101, 0.101, 0.101, 0.102, 0.102, 0.102, 0.102, 0.102, 0.102, 0.102, 0.102, 0.102, 0.102, 0.103, 0.103, 0.103, 0.103, 0.103, 0.103, 0.103, 0.103, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.104, 0.105, 0.105, 0.105, 0.105, 0.105, 0.105, 0.105, 0.105, 0.105, 0.105, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.109, 0.109, 0.109, 0.109, 0.109, 0.109, 0.109, 0.109, 0.109, 0.109, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.112, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.115, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.118, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.119, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.121, 0.121, 0.121, 0.121, 0.121, 0.121, 0.121, 0.121, 0.121, 0.121, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.122, 0.123, 0.123, 0.122, 0.123, 0.123, 0.123, 0.123, 0.123, 0.123, 0.123, 0.123, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.124, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.126, 0.125, 0.125, 0.125, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.126, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.127, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.131, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.132, 0.133, 0.133, 0.133, 0.133, 0.133, 0.133, 0.133, 0.133, 0.134, 0.133, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.134, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.136, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.137, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.139, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.141, 0.142, 0.141, 0.141, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.142, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.143, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.144, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.148, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.149, 0.15, 0.149, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.151, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.152, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.153, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.154, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.158, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.157, 0.156, 0.156, 0.155, 0.155, 0.156, 0.161, 0.159, 0.158, 0.159, 0.158, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.159, 0.16, 0.159, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.161, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.162, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.164, 0.164, 0.164, 0.164, 0.163, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.164, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.165, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.167, 0.167, 0.166, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.168, 0.167, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.168, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.171, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.172, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.173, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.174, 0.175, 0.174, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.176, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.177, 0.178, 0.178, 0.177, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.178, 0.179, 0.178, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.179, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.184, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.183, 0.184, 0.183, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.184, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.185, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.186, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.187, 0.188, 0.188, 0.188, 0.187, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.188, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.188, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.189, 0.19, 0.189, 0.189, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.19, 0.191, 0.19, 0.19, 0.191, 0.19, 0.19, 0.19, 0.19, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.191, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.193, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.195, 0.194, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.195, 0.196, 0.195, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.195, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.197, 0.197, 0.196, 0.196, 0.196, 0.196, 0.196, 0.196, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.197, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.198, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.201, 0.202, 0.201, 0.202, 0.201, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.202, 0.203, 0.202, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.203, 0.204, 0.204, 0.204, 0.203, 0.203, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.204, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.207, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.207, 0.206, 0.206, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.207, 0.208, 0.208, 0.208, 0.208, 0.207, 0.207, 0.208, 0.207, 0.207, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.208, 0.209, 0.209, 0.208, 0.208, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.21, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.21, 0.211, 0.21, 0.211, 0.21, 0.211, 0.21, 0.211, 0.21, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.211, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.212, 0.213, 0.213, 0.212, 0.212, 0.212, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.213, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.213, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.214, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.215, 0.216, 0.215, 0.215, 0.215, 0.215, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.216, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.217, 0.218, 0.218, 0.218, 0.217, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.218, 0.219, 0.219, 0.218, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.219, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.221, 0.22, 0.221, 0.221, 0.22, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.221, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.222, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.223, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.225, 0.224, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.226, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.227, 0.228, 0.228, 0.228, 0.227, 0.228, 0.228, 0.228, 0.228, 0.228, 0.228, 0.228, 0.229, 0.229, 0.228, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.23, 0.23, 0.23, 0.23, 0.23, 0.23, 0.23, 0.23, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.231, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.232, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.233, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.234, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.236, 0.236, 0.236, 0.236, 0.236, 0.236, 0.236, 0.236, 0.236, 0.236, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.237, 0.238, 0.238, 0.238, 0.238, 0.238, 0.238, 0.238, 0.238, 0.239, 0.239, 0.239, 0.248, 0.248, 0.248, 0.249, 0.248, 0.248, 0.249, 0.248, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.249, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.251, 0.25, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.252, 0.251, 0.252, 0.252, 0.252, 0.252, 0.252, 0.252, 0.252, 0.252, 0.252, 0.252, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.253, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.255, 0.256, 0.255, 0.256, 0.255, 0.256, 0.256, 0.256, 0.256, 0.256, 0.256]
r = 91       # m
b = 6       # m
Qs = 1.18/60   # m^3/s
Qd = Qs*60*60*24 # m^3/d

m_time_s = [i*60 for i in m_time] # time in seconds
num_times = len(m_time)

st.subheader(':violet-background[Estimate $T$, $Ss$, $S$, aynd $Œ≤$] by matching Neuman Curves to measured data', divider="violet")

st.markdown("""
            In this section, you can **adjust the values of transmissivity, specific storage, specific yield, and beta until the curve of drawdown versus time that is calculated and plotted on the graph matches the measured data from the Pirna test site in Germany**. The match indicates that the selected values are a reasonable representation of the aquifer properties.
            
            The alluvial aquifer is 6 meters thick. The data are produced in a relatively short pumping test that was performed in November 2024 during a field course for the MWW02 course at the [Technical University of Dresden](http://www.tu-dresden.de/die_tu_dresden/fakultaeten/fakultaet_forst_geo_und_hydrowissenschaften/fachrichtung_wasserwesen/igw).  The pumping rate during the test was 1.18 m¬≥/min. The drawdown was measured with an pressure transducer in an observation well that is 91 m away from the pumping well. The measured drawdown data show an initial response to the pumping that is reflected by the first approximately five to ten measurments. The drawdown curve subsequently flattens and then rises again. 
            
            After fitting the data to the Neuman curve we can estimate parameter values and use the aquifer thickness to calculate horizontal and vertical hydraulic conductivity of the aquifer.
            
            Additionally, you can **switch between a log-log and a semi-log plot** to evaluate the effect of the selected parameter values on the drawdown behavior. The semi-log plot is useful for visualizing that the late-portion of the early-time drawdown-versus-time data collected while testing a water table aquifer form a straight line on a semi-log graph before the period of transition from dominance of elastic storage to dominance of pore drainage. The late portion of the late-time data also form a straight line on a semi-log plot until extraneous influences impact the test results.
            
            More precise matching can be achieved by **zooming in** and manually entering **numbers versus using the sliders**. This can be activated using the toggle switch below.
            
            The **scatter plot** can also be turned on using a different toggle that is located immediately above the graph below. This provides a visual comparison of the data and the fitted curve. If the data fall on a 45-degree line, then there is a perfect match between the measured drawdowns and those calculated by the Neuman solution for the input values of $T$, $Ss$, $Sy$,  and $Œ≤$.
"""
)
# Additionally, you can perform a prediction of drawdown for specific times/spaces.

@st.fragment
def inverse():
    # This is the function to plot the graph with the data     
    # Get input data
    # Define the minimum and maximum for the logarithmic scale
    log_min1 = -7.0 # T / Corresponds to 10^-7 = 0.0000001
    log_max1 = 0.0  # T / Corresponds to 10^0 = 1
    log_min2 = -7.0 # S / Corresponds to 10^-7 = 0.0000001
    log_max2 = 0.0  # S / Corresponds to 10^0 = 1
   
    # Toggle to switch between slider and number-input mode
    st.session_state.number_input = st.toggle("Toggle to use Slider or Number for input of $T$ and $S$")
   
    columns2 = st.columns((1,1), gap = 'large')
    with columns2[0]:
        # TRANSMISSIVITY
        container = st.container()
        if st.session_state.number_input:
            T_slider_value_new = st.number_input("_(log of) Transmissivity in m¬≤/s_", log_min1,log_max1, st.session_state.T_slider_value, 0.01, format="%4.2f", key="T_input", on_change=update_T)
        else:
            T_slider_value_new = st.slider("_(log of) Transmissivity in m¬≤/s_", log_min1,log_max1, st.session_state.T_slider_value, 0.01, format="%4.2f", key="T_input", on_change=update_T)
        T = 10 ** T_slider_value_new
        container.write("**Transmissivity in m¬≤/s**: %5.2e" %T)
        # Parameter beta
        beta_choice = st.selectbox("**beta**",('0.001','0.01', '0.06', '0.2', '0.6', '1', '2', '4', '6'),)
        beta_list = ['0.001','0.01', '0.06', '0.2', '0.6', '1', '2', '4', '6']
        beta = beta_list.index(beta_choice)
        semilog = st.toggle("Toggle for **semi log graph**")
        refine_plot = st.toggle("**Zoom in** on the **data in the graph**")
        scatter = st.toggle('Show scatter plot')
    with columns2[1]:
        # SPECIFIC STORAGE SS
        container = st.container()
        if st.session_state.number_input:
            Ss_slider_value_new=st.number_input('_(log of) Specific storage_', log_min2, log_max2, st.session_state.Ss_slider_value,0.01,format="%4.2f", key="Ss_input", on_change=update_Ss)
        else:
            Ss_slider_value_new=st.slider('_(log of) Specific storage_', log_min2, log_max2, st.session_state.Ss_slider_value,0.01,format="%4.2f", key="Ss_input", on_change=update_Ss)
        Ss = 10 ** Ss_slider_value_new
        container.write("**Specific storage (1/m):** %5.2e" %Ss)
        # Specific Yield SY
        if st.session_state.number_input:
            SY = st.number_input('**Specific Yield**', 0.01, 0.50, st.session_state.SY, 0.01, format="%4.2f", key="SY_input",on_change=update_SY)
        else:
            SY = st.slider('**Specific Yield**', 0.01, 0.50, st.session_state.SY, 0.01, format="%4.2f", key="SY_input",on_change=update_SY)

    # Compute K and SS to provide parameters for plausability check (i.e. are the parameter in a reasonable range)
    K = T/b     # m/s
    Kz = K/10
    Sa = Ss * b
    S = Sa + SY
    
    # Early (a) and late (b) Theis curve
    t_a_term = r**2 * Sa / 4 / T
    t_b_term = r**2 * SY / 4 / T
    s_term = Qs/(4 * np.pi * T)

    t_a = u_inv * t_a_term
    t_b = u_inv * t_b_term
    s = w_u * s_term

    # Early Neuman curve
    for x in range(0,len(u_inv_a)):
        t_a_NEU[x] = u_inv_a[x] * t_a_term
        s_a_NEU[x] = w_u_a[x][beta] * s_term
    
    # Late Neuman curve
    for x in range(0,len(u_inv_b)):
        t_b_NEU[x] = u_inv_b[x] * t_b_term
        if (w_u_b[x][beta] == 999):
            s_b_NEU[x] = well_function(1/u_inv_b[x]) * s_term
        else:
            s_b_NEU[x] = w_u_b[x][beta] * s_term
     
    # Compute the switch time between the early and late curve
    diffs_a_NEU = np.abs(np.gradient(s_a_NEU, t_a_NEU))
    diffs_b_NEU = np.abs(np.gradient(s_b_NEU, t_b_NEU))

    # Find indices where change is below threshold
    threshold = 0.000001
    plateau_indices_a = np.where(diffs_a_NEU < threshold)[0]
    plateau_indices_b = np.where(diffs_b_NEU < threshold)[0]

     # Get start and end times of the plateau
    if len(plateau_indices_a) > 0:
        plateau_start_a = t_a_NEU[plateau_indices_a[0]]
    if len(plateau_indices_b) > 0:
        plateau_start_b = t_b_NEU[plateau_indices_b[0]]  
    switch_time = plateau_start_a + plateau_start_b / 2
    
    # Compute point data for scatter plot
    m_ddown_Neuman_a = [compute_s(T, Sa, i, Qs, r, u_inv_a, w_u_a, beta) for i in m_time_s]
    m_ddown_Neuman_b = [compute_s(T, SY, i, Qs, r, u_inv_b, w_u_b, beta) for i in m_time_s]
    
    # Recompile data and combine them according to switch time
    if scatter:
        m_ddown_Neuman_combined = [m1 if t <= switch_time else m2 for t, m1, m2 in zip(m_time_s, m_ddown_Neuman_a, m_ddown_Neuman_b)]
        # Find the max for the scatter plot
        max_s1 = math.ceil(max(m_ddown*10))/10
        max_s2 = math.ceil(max(m_ddown_Neuman_a)*10)/10
        max_s3 = math.ceil(max(m_ddown_Neuman_b)*10)/10
        max_s = max(max_s1, max_s2, max_s3)
    
    fig = plt.figure(figsize=(10,14))
    ax = fig.add_subplot(2, 1, 1)
    # Info-Box
    props   = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    out_txt = '\n'.join((       
                         r'$T$ (m¬≤/s) = %10.2E' % (T, ),
                         r'$S_s$ (m¬≤/s) = %10.2E' % (Ss, ),
                         r'$S_y$ (-) = %3.2f' % (SY, )))
    ax.plot(t_a, s, color='deepskyblue',label=r'Computed ddown early - Theis')
    ax.plot(t_b, s, color='blue',label=r'Computed ddown late - Theis')
    ax.plot(t_a_NEU, s_a_NEU, '--', color='dodgerblue',label=r'Computed ddown early - Neuman')
    ax.plot(t_b_NEU, s_b_NEU, '--', color='darkblue', label=r'Computed ddown late - Neuman')
    ax.plot(m_time_s, m_ddown,'o', color='mediumorchid', label=r'measured drawdown - Pirna 25')
    plt.xticks(fontsize=14)
    plt.yticks(fontsize=14)
    if semilog:
        plt.xscale("log")
    else:    
        plt.yscale("log")
        plt.xscale("log")     
    if refine_plot:
        if semilog:
            plt.axis([1E1,1E6,0,1])
        else:
            plt.axis([1E1,1E6,1E-3,1E+1])
    else:
        if semilog:
            plt.axis([1E-1,1E8,0,10])
            ax.text((0.2),0.8,'Coarse plot - Refine for final fitting')            
        else:
            plt.axis([1E-1,1E8,1E-4,1E+1])
            ax.text((0.2),1.8E-4,'Coarse plot - Refine for final fitting')        
    plt.xlabel(r'time t in (s)', fontsize=14)
    plt.ylabel(r'drawdown s in (m)', fontsize=14)
    plt.title(f"Neuman drawdown with beta = {beta_choice}", fontsize=16)
    ax.grid(which="both")
    plt.legend(fontsize=14)
    plt.text(0.3, 0.95,out_txt, horizontalalignment='right', transform=ax.transAxes, fontsize=14, verticalalignment='top', bbox=props)
    
    if scatter:
        x45 = [0,200]
        y45 = [0,200]
        ax = fig.add_subplot(2, 1, 2)
        ax.plot(x45,y45, '--')
        plt.plot(m_ddown, m_ddown_Neuman_combined,  'o', color='mediumorchid')
        me, mae, rmse = compute_statistics(m_ddown, m_ddown_Neuman_combined)
        plt.title('Scatter plot', fontsize=16)
        plt.xlabel(r'Measured s in m', fontsize=14)
        plt.ylabel(r'Computed s in m', fontsize=14)
        plt.ylim(0, max_s)
        plt.xlim(0, max_s)
        out_txt = '\n'.join((
                             r'$ME = %.3f$ m' % (me, ),
                             r'$MAE = %.3f$ m' % (mae, ),
                             r'$RMSE = %.3f$ m' % (rmse, ))) 
        plt.text(0.97*max_s, 0.05*max_s, out_txt, horizontalalignment='right', bbox=dict(boxstyle="square", facecolor='wheat'), fontsize=14)
   
    st.pyplot(fig)
    
    columns3 = st.columns((1,10,1), gap = 'medium')
    with columns3[1]:
        if st.button(':green[**Submit**] your parameters and **show results**'):
            st.write("**Parameters and Results**")
            st.write("- Distance of measurement from the well **$r$ = %3i" %r," m**")
            st.write("- Pumping rate during test **$Q$ = %5.3f" %Qs," m¬≥/s**")
            st.write("- Thickness of aquifer **$b$ = % 5.2f"% b, " m**")
            st.write("- Transmissivity **$T$ = % 10.2E"% T, " m¬≤/s**")
            st.write("- Storativity **$S$ = % 10.2E"% S, "[dimensionless]**")
            st.write("- Specific Storage **$Ss$ = % 10.2E"% Ss, " 1/m**")
            st.write("- Specific Yield **$Sy$ = %5.3f"% SY, "[dimensionless]**")
            st.write("- Horizontal Hydraulic Conductivity **$K_h$ = % 10.2E"% (T/b), " m¬≤/s**")
            st.write("- Vertical Hydraulic Conductivity **$K_v$ = % 10.2E"% (beta*(T/b)*b*b/r/r), " m¬≤/s**")
 
inverse()

with st.expander('**:red[Click here]** to see one **example of the Neuman curve fitting to the :violet[Pirna] data**'):
    st.markdown(""" 
            The following example shows one curve match of the Pirna data set, which represents an unconfined aquifer. If several experts made the curve match they would all have a slightly different set of parameter values, but the parameter sets would likely all be close enough to the shown example to draw comparable conclusions, and make similar predictions. While adjusting parameter values, one finds that the data can be matched well to the Neuman curve. The reason for this behavior is that the investigated aquifer, at least partially, conforms to the conditions for applying the Neuman solution because it is unconfined. 
            """)
    left_co2, cent_co2, last_co2 = st.columns((20,60,20))
    with cent_co2:
        st.image('WELL_HYDRAULICS/GWP_Pumping_Test_Analysis/assets/images/Neuman_Pirna_example.png', caption="One example for a curve match of the Neuman solution to the Pirna data") 

with st.expander('**Click here for some references**'):
    st.markdown("""
    Neuman, S.P., 1972. Theory of flow in unconfined aquifers considering delayed gravity response of the water table, Water Resources Research, volume 8, number 4, ppages 1031-1045.
    
    Neuman, S.P., 1973. Supplementary comments on ‚ÄòTheory of flow in unconfined aquifers considering delayed gravity response of the water table‚Äô, Water Resources Research, volume 9, number 4, pages 1102-1103.
    
    [Kruseman, G.P., de Ridder, N.A., & Verweij, J.M.,  1991.](https://gw-project.org/books/analysis-and-evaluation-of-pumping-test-data/) Analysis and Evaluation of Pumping Test Data, International Institute for Land Reclamation and Improvement, Wageningen, The Netherlands, 377 pages.
"""
)

"---"
# Navigation at the bottom of the side - useful for mobile phone users     
        
columnsN1 = st.columns((1,1,1), gap = 'large')
with columnsN1[0]:
    if st.button("Previous page"):
        st.switch_page("pages/04_üü¢_‚ñ∂Ô∏è Hantush_Jacob_solution.py")
with columnsN1[1]:
    st.subheader(':orange[**Navigation**]')
with columnsN1[2]:
    if st.button("Next page"):
        st.switch_page("pages/06_üéØ_‚ñ∂Ô∏è Pumping_Test_Analysis.py")

'---'
# Render footer with authors, institutions, and license logo in a single line
columns_lic = st.columns((5,1))
with columns_lic[0]:
    st.markdown(f'Developed by {", ".join(author_list)} ({year}). <br> {institution_text}', unsafe_allow_html=True)
with columns_lic[1]:
    st.image('FIGS/CC_BY-SA_icon.png')